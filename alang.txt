Array processing language.  Because Mjolnir bitches too much at APL.

So, first we have an array.
[1 2 3 4 5]

An array can be of any length.  It can even be length 0.
[]

A number is really an array of length 1.  Or rather, numbers don't exist
outside arrays.
1
-> [1]

You can also have a table, which is an array of arrays.
[[1 2] [3 4] [5 6] [7 8]]

Tables can also have any length, but each array in them must be the same
length.  This rule goes on to infinity.

All operations are done to arrays.  
If the second arg doesn't match completely, it's mapped over the array.  
First off, basic math.
[1 2 3] + [1 2 3]
-> [2 4 6]

[1 2 3] - [1 2 3]
-> [0 0 0]

[1 2 3] * [1 2 3]
-> [1 4 9]

[1 2 3] * 5
-> [5 10 15]

[1 2 3] / [3 2 1]
-> [0.33333 1 3]

neg [1 2 3]
-> [-1 -2 -3]

You can also treat them as vectors.
Things are evaluated from right to left, strictly?
dot [1 2] [3 4]
-> [-5]

cross [1 2] [3 4]
-> [whatever]

mag [5 6]
-> [7.81024968]


All numbers are floating point numbers, for simplicity's sake.

You can subscript and slice arrays nicely:
[1 2 3 4 5] @ 0
-> [1]

[1 2 3 4 5] @ 3
-> [4]

[[1 2] [3 4] [5 6]] @ 1
-> [3 4]

[[1 2] [3 4] [5 6]] @ [1 0]
-> [3]


[1 2 3 4 5] ! [2 3] 
-> [3 4]

[1 2 3 4 5] ! 2
-> [3 4 5]



Variables:
a := [1 2 3]
a * a
-> [1 4 9]

Nesting:
Everything is evaluated from left-to-right.  Parenthesis group things.
a := 3
[1 2 3 4 5] ! [1 (a - 1)]

Functions:
def defines a function.
def foo x y: x + y.
foo [1 2 3] [3 2 1]
-> [4 4 4]

Hmmm.

Mapping:

